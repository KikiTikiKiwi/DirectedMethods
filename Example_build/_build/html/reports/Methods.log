Traceback (most recent call last):
  File "/Users/kieranmacdonald/opt/anaconda3/envs/jupyter-webapp-venv/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/Users/kieranmacdonald/opt/anaconda3/envs/jupyter-webapp-venv/lib/python3.9/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/kieranmacdonald/opt/anaconda3/envs/jupyter-webapp-venv/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/Users/kieranmacdonald/opt/anaconda3/envs/jupyter-webapp-venv/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/Users/kieranmacdonald/opt/anaconda3/envs/jupyter-webapp-venv/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/Users/kieranmacdonald/opt/anaconda3/envs/jupyter-webapp-venv/lib/python3.9/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/Users/kieranmacdonald/opt/anaconda3/envs/jupyter-webapp-venv/lib/python3.9/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/kieranmacdonald/opt/anaconda3/envs/jupyter-webapp-venv/lib/python3.9/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib

from os import listdir
from os.path import isfile, join

from larch import Group
from larch.io import read_ascii
from larch.xafs import pre_edge, autobk

from pymcr.mcr import McrAR
from pymcr.regressors import OLS, NNLS
from pymcr.constraints import (ConstraintNonneg, ConstraintNorm, ConstraintCompressBelow,
                               ConstraintCutBelow, ConstraintCutAbove, ConstraintCompressAbove)

ph1_working_dir = r'/users/kieranmacdonald/Documents/GitHub/ResearchModel/XANES_DataGenerating/DatFiles_Phase_One'
ph2_working_dir = r'/users/kieranmacdonald/Documents/GitHub/ResearchModel/XANES_DataGenerating/DatFiles_Phase_Two'
ph3_working_dir = r'/users/kieranmacdonald/Documents/GitHub/ResearchModel/XANES_DataGenerating/DatFiles_Phase_Three'

data_directory = "/Users/kieranmacdonald/Documents/GitHub/ResearchModel/data"

df = pd.read_excel(data_directory + "/" + 'toLuminda.xlsx',engine='openpyxl')

#%% Read, average, de-glitch the data for all phases

def average_mus(mypath, onlyfiles_dat, energy, idx_un, idx_all):
    mus_averaged = np.zeros((energy.size, idx_un.size))
    mus_t_averaged = np.zeros((energy.size, idx_un.size))
    mus_all = np.zeros((energy.size, idx_all.size))
    mus_all_t = np.zeros((energy.size, idx_all.size))
    kk = 0
    
    
    for jj, each_idx in enumerate(idx_un):
        selection = (each_idx == idx_all)
        select_files = onlyfiles_dat[selection]
        n_curves = select_files.size
        _mu = np.zeros(energy.size)
        _mu_t = np.zeros(energy.size)
#        norm = select_files.size
        for f in select_files:
            _d =  np.genfromtxt(mypath + '/' + f)
            if kk != 580: # remove crazy outolier
                this_mu = np.interp(energy, _d[:, 0], _d[:, 4] / _d[:, 1])
                this_mu_t = np.interp(energy, _d[:, 0], -np.log(_d[:, 2] / _d[:, 1]))
                _mu += this_mu
                _mu_t += this_mu_t
                mus_all[:, kk] = this_mu.copy()
                mus_all_t[:, kk] = this_mu_t.copy()
            
            kk += 1
       
        mus_averaged[:, jj] = _mu #/ n_curves
        mus_t_averaged[:, jj] = _mu_t / n_curves
        
    return mus_averaged, mus_t_averaged

def extract_data_dict_ph1(mypath):
    onlyfiles_dat = np.array([f for f in listdir(mypath) if isfile(join(mypath, f)) and 
                                               f.endswith('.dat')])
    onlyfiles_dat = onlyfiles_dat[1:-1]
    
    _d = np.genfromtxt(mypath + '/' + onlyfiles_dat[0])
    energy = _d[1:-1, 0]
#    
    keys = np.array([i[:5] for i in onlyfiles_dat])
    unique_keys = np.unique(keys)
    mus_averaged, mus_t_averaged = average_mus(mypath, onlyfiles_dat, energy, unique_keys, keys)
    
    isGood = mus_averaged[30, :] > 0.5
    #print(isGood)
    mus_averaged = mus_averaged[:, isGood]
    mus_t_averaged = mus_t_averaged[:, isGood]
    unique_keys = unique_keys[isGood]
    
    mask = energy<6000
    mus_averaged = mus_averaged[mask]
    mus_t_averaged = mus_t_averaged[mask]
    energy = energy[mask]
    
    isSample = []
    for i, un_key in enumerate(unique_keys):
        if un_key.startswith('Ce'):
            isSample.append(False)
        else:
            isSample.append(True)
    isSample = np.array(isSample)
    isRef = ~isSample
    
    
    df = pd.DataFrame({'sample_name' : unique_keys, 'isSample': isSample, 'isRef' : isRef})
    
    data_dict = {'energy' : energy - 0.6,
                 'data' : mus_averaged,
                 'data_t':mus_t_averaged,
                 'sample_table' : df }
    return data_dict
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Input [0;32mIn [1][0m, in [0;36m<cell line: 9>[0;34m()[0m
[1;32m      6[0m [38;5;28;01mfrom[39;00m [38;5;21;01mos[39;00m [38;5;28;01mimport[39;00m listdir
[1;32m      7[0m [38;5;28;01mfrom[39;00m [38;5;21;01mos[39;00m[38;5;21;01m.[39;00m[38;5;21;01mpath[39;00m [38;5;28;01mimport[39;00m isfile, join
[0;32m----> 9[0m [38;5;28;01mfrom[39;00m [38;5;21;01mlarch[39;00m [38;5;28;01mimport[39;00m Group
[1;32m     10[0m [38;5;28;01mfrom[39;00m [38;5;21;01mlarch[39;00m[38;5;21;01m.[39;00m[38;5;21;01mio[39;00m [38;5;28;01mimport[39;00m read_ascii
[1;32m     11[0m [38;5;28;01mfrom[39;00m [38;5;21;01mlarch[39;00m[38;5;21;01m.[39;00m[38;5;21;01mxafs[39;00m [38;5;28;01mimport[39;00m pre_edge, autobk

[0;31mModuleNotFoundError[0m: No module named 'larch'
ModuleNotFoundError: No module named 'larch'

